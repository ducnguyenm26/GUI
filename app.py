# Standard library imports
import re
import warnings
import sys
import subprocess

# Initialize numpy first
import numpy as np
import numpy.core.multiarray

# Other data science libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st

# Install and import NLTK
try:
    import nltk
    nltk.download('punkt', quiet=True)
    nltk.download('stopwords', quiet=True)
    nltk.download('wordnet', quiet=True)
except ImportError:
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'nltk'])
    import nltk
    nltk.download('punkt', quiet=True)
    nltk.download('stopwords', quiet=True)
    nltk.download('wordnet', quiet=True)

# NLTK imports
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Install and import Surprise
try:
    from surprise import Dataset, Reader, SVD
except ImportError:
    subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'scikit-surprise'])
    from surprise import Dataset, Reader, SVD

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Configure warnings and style
warnings.filterwarnings('ignore')
plt.style.use('default')

# Download required NLTK data
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')

def preprocess_string(text):
    # Convert to lowercase
    text = text.lower()
    
    # Remove special characters and digits
    text = re.sub(r'[^a-zA-Z\s]', '', text)
    
    # Tokenize
    tokens = word_tokenize(text)
    
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [token for token in tokens if token not in stop_words]
    
    # Lemmatize
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(token) for token in tokens]
    
    # Join tokens back into string
    return ' '.join(tokens)

# Set matplotlib style
plt.style.use('default')

# Customize plot appearance
plt.rcParams.update({
    'figure.figsize': (10, 6),
    'axes.titlesize': 14,
    'axes.labelsize': 12,
    'axes.grid': True,
    'grid.alpha': 0.3,
    'axes.facecolor': '#f0f0f0'
})

st.set_page_config(
    page_title="Shopee Recommendation System",
    page_icon="üõçÔ∏è",
    layout="wide"
)

st.markdown("""
    <style>
    .main {
        padding: 2rem;
    }
    .stButton>button {
        width: 100%;
        background-color: #ee4d2d;
        color: white;
    }
    .stSelectbox {
        margin-bottom: 1rem;
    }
    .stTitle {
        color: #ee4d2d;
    }
    </style>
""", unsafe_allow_html=True)

st.title("üõçÔ∏è H·ªá Th·ªëng Khoa H·ªçc D·ªØ Li·ªáu")
st.write("## H·ªá Th·ªëng G·ª£i √ù S·∫£n Ph·∫©m Shopee")

@st.cache_data
def display_product(product):
    col1, col2 = st.columns([2, 1])
    with col1:
        st.write("#### üí∂ Chi Ti·∫øt S·∫£n Ph·∫©m:")
        st.write(f"""
        - **T√™n:** {product['product_name']}
        - **Danh M·ª•c:** {product['category']}
        - **Danh M·ª•c Con:** {product['sub_category']}
        - **Gi√°:** {product['price']:,.0f}ƒë
        - **ƒê√°nh Gi√°:** {product['rating']:.1f}/5
        - **M√¥ t·∫£:** {product['description'][:200]}...
        """)
    
    with col2:
        if product['image'] and str(product['image']).strip() != '':
            try:
                st.image(product['image'], width=200)
            except:
                pass

@st.cache_data
def preprocess_all_descriptions(df):
    """Pre-process all product descriptions at once"""
    return df['description'].apply(lambda x: preprocess_string(str(x).lower()))

@st.cache_data
def create_tfidf_matrix(processed_descriptions):
    """Create TF-IDF matrix once"""
    vectorizer = TfidfVectorizer()
    return vectorizer.fit_transform(processed_descriptions)

@st.cache_data
def train_svd_model(ratings_data):
    """Train SVD model once"""
    reader = Reader(rating_scale=(0, 5))
    data = Dataset.load_from_df(ratings_data[['user_id', 'product_id', 'rating']], reader)
    algo = SVD(n_factors=50, n_epochs=20, random_state=42)
    algo.fit(data.build_full_trainset())
    return algo

# Modify load_data() to include preprocessing
@st.cache_data
def load_data():
    products_df = pd.read_csv('cleaned_product_data.csv')
    ratings_df = pd.read_csv('cleaned_rating_data.csv')
    
    # Pre-process descriptions
    products_df['processed_description'] = preprocess_all_descriptions(products_df)
    
    # Create TF-IDF matrix
    tfidf_matrix = create_tfidf_matrix(products_df['processed_description'])
    
    # Train SVD model
    svd_model = train_svd_model(ratings_df)
    
    return products_df, ratings_df, tfidf_matrix, svd_model

# Update data loading
products_df, ratings_df, tfidf_matrix, svd_model = load_data()

with st.sidebar:
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/f/fe/Shopee.svg/2560px-Shopee.svg.png", width=200)
    menu = ["T·ªïng Quan", "Ph√¢n T√≠ch D·ªØ Li·ªáu", "G·ª£i √ù Theo N·ªôi Dung", "G·ª£i √ù Theo ƒê√°nh Gi√°", "G·ª£i √ù K·∫øt H·ª£p"]
    choice = st.selectbox('Menu', menu)

if choice == 'T·ªïng Quan':    
    st.subheader("T·ªïng Quan H·ªá Th·ªëng")
    
    col1, col2 = st.columns([2, 1])
    with col1:
        st.write("""
        #### üè™ Gi·ªõi thi·ªáu v·ªÅ Shopee
        Shopee l√† n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ h√†ng ƒë·∫ßu ƒê√¥ng Nam √Å v√† ƒê√†i Loan. Ra m·∫Øt nƒÉm 2015, 
        n·ªÅn t·∫£ng th∆∞∆°ng m·∫°i Shopee ƒë∆∞·ª£c x√¢y d·ª±ng nh·∫±m cung c·∫•p cho ng∆∞·ªùi d√πng tr·∫£i nghi·ªám mua s·∫Øm 
        tr·ª±c tuy·∫øn d·ªÖ d√†ng, an to√†n v√† nhanh ch√≥ng th√¥ng qua nh·ªØng thanh to√°n v√† h·ªó tr·ª£ ƒë·∫£m b·∫£o.

        #### üéØ M·ª•c ti√™u
        X√¢y d·ª±ng m·ªôt h·ªá th·ªëng Recommendation System hi·ªáu qu·∫£ cho Shopee.vn ƒë·ªÉ ƒë·ªÅ xu·∫•t v√† g·ª£i √Ω 
        s·∫£n ph·∫©m cho ng∆∞·ªùi d√πng/kh√°ch h√†ng.
        """)
    
    with col2:
        st.image("https://cf.shopee.vn/file/88d3ec246773d6a4ebd9c9f87b1ea3db", use_column_width=True)
    
    st.write("""
    #### üîç H·ªá th·ªëng s·ª≠ d·ª•ng ba ph∆∞∆°ng ph√°p ch√≠nh:
    
    1. **G·ª£i √Ω d·ª±a tr√™n n·ªôi dung:**
       - Ph√¢n t√≠ch m√¥ t·∫£ s·∫£n ph·∫©m
       - So s√°nh ƒë·ªô t∆∞∆°ng ƒë·ªìng
       - ƒê·ªÅ xu·∫•t d·ª±a tr√™n ƒë·∫∑c ƒëi·ªÉm s·∫£n ph·∫©m
    
    2. **G·ª£i √Ω d·ª±a tr√™n ƒë√°nh gi√° (SVD):**
       - S·ª≠ d·ª•ng ma tr·∫≠n ƒë√°nh gi√° ng∆∞·ªùi d√πng
       - √Åp d·ª•ng k·ªπ thu·∫≠t SVD
       - D·ª± ƒëo√°n ƒëi·ªÉm ƒë√°nh gi√°
    
    3. **Ph∆∞∆°ng ph√°p k·∫øt h·ª£p:**
       - K·∫øt h·ª£p ∆∞u ƒëi·ªÉm c·ªßa c·∫£ hai ph∆∞∆°ng ph√°p
       - C√¢n b·∫±ng gi·ªØa n·ªôi dung v√† ƒë√°nh gi√°
       - ƒê·ªÅ xu·∫•t ch√≠nh x√°c h∆°n
    """)

elif choice == 'Ph√¢n T√≠ch D·ªØ Li·ªáu':
    st.subheader("üìä Ph√¢n T√≠ch D·ªØ Li·ªáu")
    
    tab1, tab2, tab3 = st.tabs(["üìã T·ªïng Quan", "üìà Ph√¢n T√≠ch Chi Ti·∫øt", "üîç Th·ªëng K√™"])
    
    with tab1:
        st.write("#### Ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c b·∫£ng")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**B·∫£ng ƒê√°nh Gi√° (Rating):**")
            st.write("Ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c c·ªôt trong rating_data_clean:")
            st.code("""
product_id     int64
user_id        int64
user          object
rating         int64
dtype: object
            """)
            
        with col2:
            st.write("**B·∫£ng S·∫£n Ph·∫©m (Product):**")
            st.write("Ki·ªÉu d·ªØ li·ªáu c·ªßa c√°c c·ªôt trong product_data_clean:")
            st.code("""
product_id        int64
product_name     object
category         object
sub_category     object
link             object
image            object
price           float64
rating          float64
description      object
dtype: object
            """)
        
        st.write("#### üìä Th·ªëng K√™ C∆° B·∫£n")
        col1, col2 = st.columns(2)
        
        with col1:
            st.info("**D·ªØ Li·ªáu S·∫£n Ph·∫©m:**")
            st.write(f"üì¶ T·ªïng s·ªë s·∫£n ph·∫©m: {len(products_df):,}")
            st.write(f"üè∑Ô∏è S·ªë danh m·ª•c: {len(products_df['category'].unique())}")
            st.write(f"üìë S·ªë danh m·ª•c con: {len(products_df['sub_category'].unique())}")
            st.write(f"üí∞ Gi√° trung b√¨nh: {products_df['price'].mean():,.2f}ƒë")
            st.write(f"‚≠ê ƒê√°nh gi√° trung b√¨nh: {products_df['rating'].mean():.2f}/5")
            
        with col2:
            st.info("**D·ªØ Li·ªáu ƒê√°nh Gi√°:**")
            st.write(f"üìù T·ªïng s·ªë ƒë√°nh gi√°: {len(ratings_df):,}")
            st.write(f"üë• S·ªë ng∆∞·ªùi d√πng: {len(ratings_df['user_id'].unique()):,}")
            st.write(f"‚≠ê ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh: {ratings_df['rating'].mean():.2f}/5")
            st.write(f"üìä S·ªë ƒë√°nh gi√°/ng∆∞·ªùi d√πng: {len(ratings_df)/len(ratings_df['user_id'].unique()):.1f}")
    
    with tab2:
        st.write("#### üìà Ph√¢n T√≠ch Chi Ti·∫øt")
        
        # Sample Data Display
        st.write("#### D·ªØ li·ªáu m·∫´u")
        tab_data1, tab_data2 = st.tabs(["D·ªØ li·ªáu ƒê√°nh Gi√°", "D·ªØ li·ªáu S·∫£n Ph·∫©m"])
        
        with tab_data1:
            st.dataframe(ratings_df.head())
            
        with tab_data2:
            st.dataframe(products_df.head())
        
        # Rating Distribution from DataAnalysis.ipynb
        st.write("#### Ph√¢n T√≠ch ƒê√°nh Gi√°")
        col1, col2 = st.columns(2)
        
        with col1:
            # Create rating distribution plot
            plt.figure(figsize=(10, 6))
            sns.histplot(data=ratings_df, x='rating', bins=5, color='skyblue')
            plt.title('Ph√¢n b·ªë ƒëi·ªÉm ƒë√°nh gi√°', fontsize=12, pad=15)
            plt.xlabel('ƒêi·ªÉm ƒë√°nh gi√°', fontsize=10)
            plt.ylabel('S·ªë l∆∞·ª£ng', fontsize=10)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        
        with col2:
            # Average rating by category from product data
            avg_rating_by_cat = products_df.groupby('category')['rating'].mean().sort_values(ascending=True)
            plt.figure(figsize=(10, 6))
            sns.barplot(x=avg_rating_by_cat.values, y=avg_rating_by_cat.index, color='skyblue')
            plt.title('ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh theo danh m·ª•c', fontsize=12, pad=15)
            plt.xlabel('ƒêi·ªÉm ƒë√°nh gi√° trung b√¨nh', fontsize=10)
            st.pyplot(plt)
            plt.close()
        
        # Description Length Analysis
        st.write("#### Ph√¢n T√≠ch ƒê·ªô D√†i M√¥ T·∫£")
        col1, col2 = st.columns(2)
        
        with col1:
            # Description length distribution
            plt.figure(figsize=(10, 6))
            description_lengths = products_df['description'].str.len()
            sns.histplot(data=description_lengths, bins=30, color='purple')
            plt.title('Ph√¢n b·ªë ƒë·ªô d√†i m√¥ t·∫£ s·∫£n ph·∫©m', fontsize=12, pad=15)
            plt.xlabel('ƒê·ªô d√†i m√¥ t·∫£', fontsize=10)
            plt.ylabel('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m', fontsize=10)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        
        with col2:
            # Box plot of description length by category
            plt.figure(figsize=(10, 6))
            description_by_category = pd.DataFrame({
                'category': products_df['category'],
                'description_length': products_df['description'].str.len()
            })
            sns.boxplot(data=description_by_category, x='description_length', y='category', color='purple')
            plt.title('Ph√¢n b·ªë ƒë·ªô d√†i m√¥ t·∫£ theo danh m·ª•c', fontsize=12, pad=15)
            plt.xlabel('ƒê·ªô d√†i m√¥ t·∫£', fontsize=10)
            plt.ylabel('Danh m·ª•c', fontsize=10)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()

        # Price Analysis
        st.write("#### Ph√¢n T√≠ch Gi√°")
        col1, col2 = st.columns(2)
        
        with col1:
            # Price distribution
            plt.figure(figsize=(10, 6))
            sns.histplot(data=products_df, x='price', bins=50, color='skyblue')
            plt.title('Ph√¢n b·ªë gi√° s·∫£n ph·∫©m', fontsize=12, pad=15)
            plt.xlabel('Gi√° (VNƒê)', fontsize=10)
            plt.ylabel('S·ªë l∆∞·ª£ng', fontsize=10)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        
        with col2:
            # Box plot of prices by category
            plt.figure(figsize=(10, 6))
            sns.boxplot(data=products_df, x='price', y='category', color='skyblue')
            plt.title('Ph√¢n b·ªë gi√° theo danh m·ª•c', fontsize=12, pad=15)
            plt.xlabel('Gi√° (VNƒê)', fontsize=10)
            plt.ylabel('Danh m·ª•c', fontsize=10)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
        
        # Category Analysis
        st.write("#### Ph√¢n T√≠ch Danh M·ª•c")
        col1, col2 = st.columns(2)
        
        with col1:
            # Product distribution by category
            plt.figure(figsize=(10, 6))
            category_counts = products_df['category'].value_counts()
            colors = plt.cm.Pastel1(np.linspace(0, 1, len(category_counts)))
            plt.pie(category_counts.values, labels=category_counts.index, autopct='%1.1f%%', 
                   colors=colors, startangle=90)
            plt.title('Ph√¢n b·ªë s·∫£n ph·∫©m theo danh m·ª•c', fontsize=12, pad=15)
            st.pyplot(plt)
            plt.close()
        
        with col2:
            # Top 10 subcategories
            plt.figure(figsize=(10, 6))
            top_subcats = products_df['sub_category'].value_counts().head(10)
            sns.barplot(x=top_subcats.values, y=top_subcats.index, color='skyblue')
            plt.title('Top 10 danh m·ª•c con ph·ªï bi·∫øn', fontsize=12, pad=15)
            plt.xlabel('S·ªë l∆∞·ª£ng s·∫£n ph·∫©m', fontsize=10)
            plt.grid(True, alpha=0.3)
            st.pyplot(plt)
            plt.close()
    
    with tab3:
        st.write("#### üìä Th·ªëng K√™ Chi Ti·∫øt theo Danh M·ª•c")
        
        category_stats = products_df.groupby('category').agg({
            'product_id': 'count',
            'price': ['mean', 'min', 'max'],
            'rating': ['mean', 'count']
        }).round(2)
        
        category_stats.columns = [
            'S·ªë S·∫£n Ph·∫©m', 
            'Gi√° TB', 'Gi√° Min', 'Gi√° Max',
            'ƒê√°nh Gi√° TB', 'S·ªë L∆∞·ª£ng ƒê√°nh Gi√°'
        ]
        
        for col in ['Gi√° TB', 'Gi√° Min', 'Gi√° Max']:
            category_stats[col] = category_stats[col].apply(lambda x: f"{x:,.0f}ƒë")
            
        st.dataframe(
            category_stats,
            use_container_width=True,
            height=400
        )
        
        # Category Distribution Bar Plot
        fig_cat_dist = px.bar(
            x=category_counts.values,
            y=category_counts.index,
            orientation='h',
            title="S·ªë L∆∞·ª£ng S·∫£n Ph·∫©m theo Danh M·ª•c",
            labels={"x": "S·ªë L∆∞·ª£ng", "y": "Danh M·ª•c"}
        )
        st.plotly_chart(fig_cat_dist, use_container_width=True)

elif choice == 'G·ª£i √ù Theo N·ªôi Dung':
    st.subheader("üîç G·ª£i √ù D·ª±a Tr√™n N·ªôi Dung")
    
    with st.container():
        search_term = st.text_input("üîé T√¨m ki·∫øm s·∫£n ph·∫©m:")

        if search_term:
            with st.spinner('üîÑ ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m t∆∞∆°ng t·ª±...'):
                matches = products_df[products_df['product_name'].str.contains(search_term, case=False, na=False)]

                if matches.empty:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.")
                else:
                    selected_product = st.selectbox(
                        "Ch·ªçn s·∫£n ph·∫©m:",
                        matches['product_name'].tolist()
                    )

                    if selected_product:
                        product_details = products_df[products_df['product_name'] == selected_product].iloc[0]

                        col1, col2 = st.columns([2, 1])
                        with col1:
                            st.write("#### üì¶ Chi Ti·∫øt S·∫£n Ph·∫©m:")
                            st.write(f"""
                            - **T√™n:** {product_details['product_name']}
                            - **Danh M·ª•c:** {product_details['category']}
                            - **Danh M·ª•c Con:** {product_details['sub_category']}
                            - **Gi√°:** {product_details['price']:,.0f}ƒë
                            - **ƒê√°nh Gi√°:** {product_details['rating']:.1f}/5
                            """)

                        with col2:
                            if product_details['image'] and str(product_details['image']).strip() != '':
                                try:
                                    st.image(product_details['image'], width=200)
                                except:
                                    pass

                        # In 'G·ª£i √ù Theo N·ªôi Dung' section, replace the content-based recommendation code:
                        if st.button("üîç Xem G·ª£i √ù S·∫£n Ph·∫©m T∆∞∆°ng T·ª±", use_container_width=True):
                            with st.spinner('ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m t∆∞∆°ng t·ª±...'):
                                products_df['processed_description'] = products_df['description'].apply(
                                    lambda x: preprocess_string(str(x).lower())
                                )

                                vectorizer = TfidfVectorizer()
                                tfidf_matrix = vectorizer.fit_transform(products_df['processed_description'])

                                product_idx = products_df[products_df['product_name'] == selected_product].index[0]
                                similarities = cosine_similarity(tfidf_matrix[product_idx], tfidf_matrix)
                                similar_indices = similarities.argsort()[0][-6:-1][::-1]

                                st.write("#### üè∑Ô∏è S·∫£n Ph·∫©m T∆∞∆°ng T·ª±:")
                                displayed_count = 0

                                for idx in similar_indices:
                                    prod = products_df.iloc[idx]
                                    if prod['product_id'] != product_details['product_id']:
                                        with st.container():
                                            col1, col2 = st.columns([1, 3])

                                            with col1:
                                                if prod['image'] and str(prod['image']).strip() != '':
                                                    try:
                                                        st.image(prod['image'], width=150)
                                                    except:
                                                        pass

                                            with col2:
                                                st.write(f"**{prod['product_name']}**")
                                                st.write(f"üí∞ Gi√°: {prod['price']:,.0f}ƒë")
                                                st.write(f"‚≠ê ƒê√°nh gi√°: {prod['rating']:.1f}/5")
                                                st.write(f"üìÅ Danh m·ª•c: {prod['category']} > {prod['sub_category']}")
                                                st.write(f"üìñ M√¥ t·∫£: {prod['description'][:200]}...")
                                            st.write("---")
                                        displayed_count += 1

elif choice == 'G·ª£i √ù Theo ƒê√°nh Gi√°':
    st.subheader("üë• G·ª£i √ù D·ª±a Tr√™n ƒê√°nh Gi√° (SVD)")
    
    with st.container():
        user_id = st.number_input("üë§ Nh·∫≠p ID ng∆∞·ªùi d√πng:", min_value=1, value=1)
        
        if st.button("üîç Xem G·ª£i √ù", use_container_width=True):
            with st.spinner('üîÑ ƒêang ph√¢n t√≠ch s·ªü th√≠ch v√† t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p...'):
                # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ ƒë√°nh gi√° n√†o ch∆∞a
                user_ratings = ratings_df[ratings_df['user_id'] == user_id]
                
                if user_ratings.empty:
                    st.warning("‚ö†Ô∏è Ng∆∞·ªùi d√πng ch∆∞a c√≥ ƒë√°nh gi√° n√†o!")
                else:
                    # Hu·∫•n luy·ªán m√¥ h√¨nh SVD
                    reader = Reader(rating_scale=(0, 5))
                    data = Dataset.load_from_df(ratings_df[['user_id', 'product_id', 'rating']], reader)
                    algo = SVD(n_factors=50, n_epochs=20, random_state=42)
                    algo.fit(data.build_full_trainset())
                    
                    # T√¨m c√°c s·∫£n ph·∫©m ch∆∞a ƒë∆∞·ª£c ƒë√°nh gi√°
                    rated_products = set(user_ratings['product_id'])
                    all_products = set(products_df['product_id'])
                    unrated_products = list(all_products - rated_products)
                    
                    # D·ª± ƒëo√°n ƒë√°nh gi√° cho c√°c s·∫£n ph·∫©m ch∆∞a ƒë√°nh gi√°
                    predictions = []
                    for prod_id in unrated_products:
                        pred = algo.predict(user_id, prod_id)
                        predictions.append((prod_id, pred.est))
                    
                    # S·∫Øp x·∫øp theo ƒë√°nh gi√° d·ª± ƒëo√°n
                    predictions.sort(key=lambda x: x[1], reverse=True)
                    
                    st.write("#### üè∑Ô∏è S·∫£n Ph·∫©m G·ª£i √ù:")
                    displayed_count = 0
                    
                    for prod_id, pred_rating in predictions:
                        if displayed_count >= 5:
                            break
                            
                        product = products_df[products_df['product_id'] == prod_id].iloc[0]
                        
                        with st.container():
                            col1, col2 = st.columns([1, 3])
                            
                            with col1:
                                if product['image'] and str(product['image']).strip() != '':
                                    try:
                                        st.image(product['image'], width=150)
                                    except:
                                        pass
                            
                            with col2:
                                st.write(f"**{product['product_name']}**")
                                st.write(f"üí∞ Gi√°: {product['price']:,.0f}ƒë")
                                st.write(f"‚≠ê ƒê√°nh gi√° d·ª± ƒëo√°n: {pred_rating:.1f}/5")
                                st.write(f"üìÅ Danh m·ª•c: {product['category']} > {product['sub_category']}")
                                st.write(f"üìñ M√¥ t·∫£: {product['description'][:200]}...")
                            st.write("---")
                            
                        displayed_count += 1

elif choice == 'G·ª£i √ù K·∫øt H·ª£p':
    st.subheader("üîÑ G·ª£i √ù K·∫øt H·ª£p")
    
    with st.container():
        col1, col2 = st.columns(2)
        
        with col1:
            user_id = st.number_input("üë§ Nh·∫≠p ID ng∆∞·ªùi d√πng:", min_value=1, value=1)
        
        with col2:
            search_term = st.text_input("üîé T√¨m ki·∫øm s·∫£n ph·∫©m:")
        
        if search_term and st.button("üîç Xem G·ª£i √ù K·∫øt H·ª£p", use_container_width=True):
            with st.spinner('üîÑ ƒêang t√¨m ki·∫øm s·∫£n ph·∫©m...'):
                matches = products_df[products_df['product_name'].str.contains(search_term, case=False, na=False)]
                if not matches.empty:
                    selected_product = matches.iloc[0]
                    st.write("##### S·∫£n ph·∫©m ƒë∆∞·ª£c ch·ªçn:")
                    display_product(selected_product)
                    
                    with st.spinner('üîÑ ƒêang ph√¢n t√≠ch n·ªôi dung v√† ƒë√°nh gi√°...'):
                        # T√≠nh ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng n·ªôi dung
                        products_df['processed_description'] = products_df['description'].apply(
                            lambda x: preprocess_string(str(x).lower())
                        )
                        vectorizer = TfidfVectorizer()
                        tfidf_matrix = vectorizer.fit_transform(products_df['processed_description'])
                        
                        product_idx = products_df[products_df['product_id'] == selected_product['product_id']].index[0]
                        content_similarities = cosine_similarity(tfidf_matrix[product_idx], tfidf_matrix)
                        
                        # Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ c√≥ ƒë√°nh gi√° n√†o ch∆∞a
                        user_ratings = ratings_df[ratings_df['user_id'] == user_id]
                        
                        if user_ratings.empty:
                            st.warning("‚ö†Ô∏è Ng∆∞·ªùi d√πng ch∆∞a c√≥ ƒë√°nh gi√° n√†o! Ch·ªâ s·ª≠ d·ª•ng g·ª£i √Ω d·ª±a tr√™n n·ªôi dung.")
                            hybrid_similarities = content_similarities
                        else:
                            # Hu·∫•n luy·ªán m√¥ h√¨nh SVD
                            reader = Reader(rating_scale=(0, 5))
                            data = Dataset.load_from_df(ratings_df[['user_id', 'product_id', 'rating']], reader)
                            algo = SVD(n_factors=50, n_epochs=20, random_state=42)
                            algo.fit(data.build_full_trainset())
                            
                            # D·ª± ƒëo√°n ƒë√°nh gi√° cho t·∫•t c·∫£ s·∫£n ph·∫©m
                            cf_scores = []
                            for idx, _ in enumerate(products_df['product_id']):
                                pred = algo.predict(user_id, products_df.iloc[idx]['product_id'])
                                cf_scores.append(pred.est)
                            
                            # K·∫øt h·ª£p ƒëi·ªÉm t∆∞∆°ng ƒë·ªìng n·ªôi dung v√† ƒë√°nh gi√° h·ª£p t√°c
                            hybrid_similarities = 0.6 * content_similarities[0] + 0.4 * np.array(cf_scores)
                        
                        # T·∫°o danh s√°ch s·∫£n ph·∫©m g·ª£i √Ω
                        hybrid_scores = [(idx, score) for idx, score in enumerate(hybrid_similarities)]
                        hybrid_scores.sort(key=lambda x: x[1], reverse=True)
                        
                        st.write("#### üè∑Ô∏è S·∫£n Ph·∫©m ƒê∆∞·ª£c G·ª£i √ù (K·∫øt H·ª£p):")
                        displayed_count = 0
                        
                        for idx, score in hybrid_scores:
                            if displayed_count >= 5:
                                break
                                
                            product = products_df.iloc[idx]
                            if product['product_id'] != selected_product['product_id']:
                                with st.container():
                                    col1, col2 = st.columns([1, 3])
                                    
                                    with col1:
                                        if product['image'] and str(product['image']).strip() != '':
                                            try:
                                                st.image(product['image'], width=150)
                                            except:
                                                pass
                                    
                                    with col2:
                                        st.write(f"**{product['product_name']}**")
                                        st.write(f"üí∞ Gi√°: {product['price']:,.0f}ƒë")
                                        st.write(f"‚≠ê ƒê√°nh gi√°: {product['rating']:.1f}/5")
                                        st.write(f"üìÅ Danh m·ª•c: {product['category']} > {product['sub_category']}")
                                        st.write(f"üìñ M√¥ t·∫£: {product['description'][:200]}...")
                                        st.write(f"üéâ ƒê·ªô ph√π h·ª£p: {score:.2f}")
                                    st.write("---")
                                    displayed_count += 1
                else:
                    st.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.")